From f1dd396bd21794a18fec7323e5e982d9f2044d39 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Tue, 17 Dec 2013 13:15:52 +0700
Subject: [PATCH 01/14] OMXCodec: set default input buffer size

Broadcom OMX only set the buffer size to 65536 by default which
is not enough for higher bitrate video

(This patch has been adapted for Lollipop)

Change-Id: I74372f3d821e41feb38b9bc0cca4ef56aa019493
---
 media/libstagefright/ACodec.cpp | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index 0506356..c67e270 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -1850,6 +1850,18 @@ status_t ACodec::configureCodec(
                     "using-sw-read-often", !!(usageBits & GRALLOC_USAGE_SW_READ_OFTEN));
         }
     }
+// Rhea's OMX fail to set a reasonable default size from width and height
+#ifdef RHEA_HWC
+    else if (!strncmp(mComponentName.c_str(), "OMX.BRCM.vc4.decoder.", 21)) {
+        int32_t width;
+        int32_t height;
+        if (msg->findInt32("width", &width) && msg->findInt32("height", &height)) {
+            setMinBufferSize(kPortIndexInput, (width * height * 3) / 2);
+        } else {
+            ALOGE("Failed to set min buffer size");
+        }
+    }
+#endif
 
     int32_t prependSPSPPS = 0;
     if (encoder
-- 
2.10.1


From 82b68dbab2465531257a40b94ba3d739cd63ccfc Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Wed, 19 Nov 2014 20:33:58 +0700
Subject: [PATCH 02/14] ACodec: skip port index checking on vc4 encoder

Change-Id: I3fe742a8ec4b7f9bc0c4e5f0825fd3b88965a95e
---
 media/libstagefright/ACodec.cpp | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index c67e270..3db0476 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -4893,6 +4893,11 @@ status_t ACodec::getPortFormat(OMX_U32 portIndex, sp<AMessage> &notify) {
         return err;
     }
 
+#ifdef RHEA_HWC
+    if (strncmp(mComponentName.c_str(), "OMX.BRCM.vc4.encoder.", 21) != 0)
+        // Skip checking on vc4 encoder. It will return the incorrect
+        // port index, but correct parameters.
+#endif
     if (def.eDir != (portIndex == kPortIndexOutput ? OMX_DirOutput : OMX_DirInput)) {
         ALOGE("unexpected dir: %s(%d) on %s port", asString(def.eDir), def.eDir, niceIndex);
         return BAD_VALUE;
-- 
2.10.1


From 5766593dd34e03d2ac63e469598a1b02555d66ca Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Sun, 23 Nov 2014 17:27:20 +0700
Subject: [PATCH 03/14] ACodec: Don't trust provided width/height when setting
 input buffer size

They are bogus

Change-Id: I202b291a84d2f9a8c29aa2177ba52a0465f39deb
---
 media/libstagefright/ACodec.cpp | 10 +++-------
 1 file changed, 3 insertions(+), 7 deletions(-)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index 3db0476..993c41a 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -1853,13 +1853,9 @@ status_t ACodec::configureCodec(
 // Rhea's OMX fail to set a reasonable default size from width and height
 #ifdef RHEA_HWC
     else if (!strncmp(mComponentName.c_str(), "OMX.BRCM.vc4.decoder.", 21)) {
-        int32_t width;
-        int32_t height;
-        if (msg->findInt32("width", &width) && msg->findInt32("height", &height)) {
-            setMinBufferSize(kPortIndexInput, (width * height * 3) / 2);
-        } else {
-            ALOGE("Failed to set min buffer size");
-        }
+        // We cannot trust the width/height from the message
+        // so just use 1920x1080
+        setMinBufferSize(kPortIndexInput, (1920 * 1080 * 3) / 2);
     }
 #endif
 
-- 
2.10.1


From 8f0b6f4bdbdbf09304305b3407183c9321f3f951 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Fri, 28 Nov 2014 21:07:59 +0700
Subject: [PATCH 04/14] AudioFlinger: i9082: HACK: disable stereo record

Stereo record causes audio to speed up x2 for some reason.
Record in mono and let AudioFlinger resample to stereo
(we only have one mic anyway)

Change-Id: I59236addc022186fa35bd3b3914f42709c2318de
---
 services/audioflinger/AudioFlinger.cpp | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/services/audioflinger/AudioFlinger.cpp b/services/audioflinger/AudioFlinger.cpp
index 5c859eb..310eb72 100644
--- a/services/audioflinger/AudioFlinger.cpp
+++ b/services/audioflinger/AudioFlinger.cpp
@@ -2136,6 +2136,12 @@ sp<AudioFlinger::RecordThread> AudioFlinger::openInput_l(audio_module_handle_t m
     audio_config_t halconfig = *config;
     audio_hw_device_t *inHwHal = inHwDev->hwDevice();
     audio_stream_in_t *inStream = NULL;
+
+#ifdef RHEA_HWC
+    ALOGD("Forcing channel mask to mono on rhea");
+    halconfig.channel_mask = AUDIO_CHANNEL_IN_MONO;
+#endif
+
     status_t status = inHwHal->open_input_stream(inHwHal, *input, devices, &halconfig,
                                         &inStream, flags, address.string(), source);
     ALOGV("openInput_l() openInputStream returned input %p, SamplingRate %d"
-- 
2.10.1


From 3e3d9be5b65d29d5290a4053a8c707738094cf28 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Wed, 10 Dec 2014 17:38:10 +0700
Subject: [PATCH 05/14] AudioFlinger: i9082: HACK: force audio to 48 KHz

Let surfaceflinger do all the resampling instead of the audio HAL

Don't know if it fixes anything, but worth a try

Change-Id: I0113831464f2f64c26a9c93bba8fe6b8229b09b4
---
 services/audioflinger/AudioFlinger.cpp | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/services/audioflinger/AudioFlinger.cpp b/services/audioflinger/AudioFlinger.cpp
index 310eb72..eff4f02 100644
--- a/services/audioflinger/AudioFlinger.cpp
+++ b/services/audioflinger/AudioFlinger.cpp
@@ -2138,8 +2138,9 @@ sp<AudioFlinger::RecordThread> AudioFlinger::openInput_l(audio_module_handle_t m
     audio_stream_in_t *inStream = NULL;
 
 #ifdef RHEA_HWC
-    ALOGD("Forcing channel mask to mono on rhea");
+    ALOGD("Forcing input to mono 48K on rhea");
     halconfig.channel_mask = AUDIO_CHANNEL_IN_MONO;
+    halconfig.sample_rate = 48000;
 #endif
 
     status_t status = inHwHal->open_input_stream(inHwHal, *input, devices, &halconfig,
-- 
2.10.1


From 35bce35f5940751e4baad4c253f5041bf6a20058 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Tue, 16 Dec 2014 21:12:22 +0700
Subject: [PATCH 06/14] stagefright: i9082: don't allocate too many extra
 buffers

Too many extra buffers (for a total of 8) causes random
video freezes and freezes on rotation

Change-Id: Idfe85f3cd77d6aa5422073857ceecec902e3ca68
---
 media/libstagefright/ACodec.cpp | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index 993c41a..6f590ec 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -1104,7 +1104,11 @@ status_t ACodec::configureOutputBuffersFromNativeWindow(
     // This check was present in KitKat.
     if (def.nBufferCountActual < def.nBufferCountMin + *minUndequeuedBuffers) {
 #endif
+#ifdef RHEA_HWC
+    for (OMX_U32 extraBuffers = 1; /* condition inside loop */; extraBuffers--) {
+#else
     for (OMX_U32 extraBuffers = 2 + 1; /* condition inside loop */; extraBuffers--) {
+#endif
         OMX_U32 newBufferCount =
             def.nBufferCountMin + *minUndequeuedBuffers + extraBuffers;
         def.nBufferCountActual = newBufferCount;
-- 
2.10.1


From 6f7ae4560da20b82099641984d654d00286f2361 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Sat, 20 Dec 2014 19:09:59 +0700
Subject: [PATCH 07/14] stagefright: RHEA_HWC: fix for screen recording

Change-Id: Ib8a677eb1ecabc30efe163faa9b209f4db966437
---
 media/libstagefright/omx/GraphicBufferSource.cpp | 2 ++
 media/libstagefright/omx/OMXNodeInstance.cpp     | 7 +++++++
 2 files changed, 9 insertions(+)

diff --git a/media/libstagefright/omx/GraphicBufferSource.cpp b/media/libstagefright/omx/GraphicBufferSource.cpp
index 8b1be33..800b57f 100644
--- a/media/libstagefright/omx/GraphicBufferSource.cpp
+++ b/media/libstagefright/omx/GraphicBufferSource.cpp
@@ -380,6 +380,7 @@ void GraphicBufferSource::codecBufferEmptied(OMX_BUFFERHEADERTYPE* header, int f
             }
         } else if (type == kMetadataBufferTypeANWBuffer
                 && header->nAllocLen >= sizeof(VideoNativeMetadata)) {
+#ifndef RHEA_HWC
             VideoNativeMetadata &nativeMeta = *(VideoNativeMetadata *)data;
             if (nativeMeta.pBuffer != codecBuffer.mGraphicBuffer->getNativeBuffer()) {
                 // should never happen
@@ -387,6 +388,7 @@ void GraphicBufferSource::codecBufferEmptied(OMX_BUFFERHEADERTYPE* header, int f
                         nativeMeta.pBuffer, codecBuffer.mGraphicBuffer->getNativeBuffer());
                 CHECK(!"codecBufferEmptied: mismatched buffer");
             }
+#endif
         }
     }
 
diff --git a/media/libstagefright/omx/OMXNodeInstance.cpp b/media/libstagefright/omx/OMXNodeInstance.cpp
index d29c387..7e79797 100644
--- a/media/libstagefright/omx/OMXNodeInstance.cpp
+++ b/media/libstagefright/omx/OMXNodeInstance.cpp
@@ -981,10 +981,17 @@ status_t OMXNodeInstance::createGraphicBufferSource(
     }
 
     if (def.format.video.eColorFormat != OMX_COLOR_FormatAndroidOpaque) {
+#ifdef RHEA_HWC
+        // VC Encoder change OMX_COLOR_FormatAndroidOpaque to 0x7F000005
+        if (def.format.video.eColorFormat != 0x7F000005) {
+#endif
         CLOGW("createInputSurface requires COLOR_FormatSurface "
                 "(AndroidOpaque) color format instead of %s(%#x)",
                 asString(def.format.video.eColorFormat), def.format.video.eColorFormat);
         return INVALID_OPERATION;
+#ifdef RHEA_HWC
+        }
+#endif
     }
 
     uint32_t usageBits;
-- 
2.10.1


From 5ad3809f628e6b77fcbef48bce5afcf1c1b3b0f6 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Sun, 21 Dec 2014 15:25:33 +0700
Subject: [PATCH 08/14] stagefright: RHEA_HWC: fix for miracast

Our encoder does not support OMX_Video_ControlRateConstant

Change-Id: I5f98f00406a6b28c1a2a1862fbcefa2fdd9055d6
---
 media/libstagefright/ACodec.cpp | 18 ++++++++++++------
 1 file changed, 12 insertions(+), 6 deletions(-)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index e191cee..3b892af 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -4114,6 +4114,13 @@ static OMX_U32 setPFramesSpacing(
 }
 
 static OMX_VIDEO_CONTROLRATETYPE getBitrateMode(const sp<AMessage> &msg) {
+	+static OMX_VIDEO_CONTROLRATETYPE getBitrateMode(const sp<AMessage> &msg, const AString &name) {
+#ifdef RHEA_HWC
+		// vc4 encoder only supports VBR
+		if (strncmp(name.c_str(), "OMX.BRCM.vc4.encoder.", 21) == 0) {
+       return OMX_Video_ControlRateVariable;
+	}
+#endif
     int32_t tmp;
     if (!msg->findInt32("bitrate-mode", &tmp)) {
         return OMX_Video_ControlRateVariable;
@@ -4130,7 +4137,7 @@ status_t ACodec::setupMPEG4EncoderParameters(const sp<AMessage> &msg) {
         return INVALID_OPERATION;
     }
 
-    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg);
+    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg, mComponentName);
 
     float frameRate;
     if (!msg->findFloat("frame-rate", &frameRate)) {
@@ -4213,7 +4220,7 @@ status_t ACodec::setupH263EncoderParameters(const sp<AMessage> &msg) {
         return INVALID_OPERATION;
     }
 
-    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg);
+    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg, mComponentName);
 
     float frameRate;
     if (!msg->findFloat("frame-rate", &frameRate)) {
@@ -4342,7 +4349,7 @@ status_t ACodec::setupAVCEncoderParameters(const sp<AMessage> &msg) {
         return INVALID_OPERATION;
     }
 
-    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg);
+    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg, mComponentName);
 
     float frameRate;
     if (!msg->findFloat("frame-rate", &frameRate)) {
@@ -4510,7 +4517,7 @@ status_t ACodec::setupHEVCEncoderParameters(const sp<AMessage> &msg) {
         return INVALID_OPERATION;
     }
 
-    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg);
+    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg, mComponentName);
 
     float frameRate;
     if (!msg->findFloat("frame-rate", &frameRate)) {
@@ -4579,7 +4586,7 @@ status_t ACodec::setupVPXEncoderParameters(const sp<AMessage> &msg, sp<AMessage>
     }
     msg->findAsFloat("i-frame-interval", &iFrameInterval);
 
-    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg);
+    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg, mComponentName);
 
     float frameRate;
     if (!msg->findFloat("frame-rate", &frameRate)) {
-- 
2.10.1


From f5f1e7f6e96a08a7e5bd0649d974dd5c7aaad75c Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Sun, 24 Jan 2016 12:38:26 +0700
Subject: [PATCH 09/14] AudioFlinger: i9082: fix getMicMute

Our audio driver sometimes return NO_INIT instead of NO_ERROR
for the get_mic_mute call. Prior to Marshmallow, this didn't cause
any issue because the return code was not checked.
---
 services/audioflinger/AudioFlinger.cpp | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/services/audioflinger/AudioFlinger.cpp b/services/audioflinger/AudioFlinger.cpp
index eff4f02..f793ea0 100644
--- a/services/audioflinger/AudioFlinger.cpp
+++ b/services/audioflinger/AudioFlinger.cpp
@@ -898,6 +898,12 @@ bool AudioFlinger::getMicMute() const
     for (size_t i = 0; i < mAudioHwDevs.size(); i++) {
         audio_hw_device_t *dev = mAudioHwDevs.valueAt(i)->hwDevice();
         status_t result = dev->get_mic_mute(dev, &state);
+#ifdef RHEA_HWC
+        // When not muted, rhea's audio driver incorrectly returns NO_INIT instead of NO_ERROR
+        if (mAudioHwDevs.valueAt(i) == mPrimaryHardwareDev && result == NO_INIT) {
+            result = NO_ERROR;
+        }
+#endif
         if (result == NO_ERROR) {
             mute = mute && state;
         }
-- 
2.10.1


From b1aa1a3d70467d0b9134d010903d07f35d8b7e42 Mon Sep 17 00:00:00 2001
From: ghsr <ghsr92@yandex.ru>
Date: Thu, 20 Oct 2016 02:10:59 +0600
Subject: [PATCH 10/14] AudioFlinger: RHEA_HWC: fix AudioRecord

Our old audio library does not support hardware timestamps
and return an incorrect value. This causes libaudioflinger crashes when
attempting to record audio.

Change-Id: Ife5c92de0c4378268d71fdf53508829233673892
---
 services/audioflinger/Threads.cpp | 2 ++
 1 file changed, 2 insertions(+)

iff --git a/services/audioflinger/AudioFlinger.cpp b/services/audioflinger/AudioFlinger.cpp
index 5ae403c..87f9ebe 100644
--- a/services/audioflinger/AudioFlinger.cpp
+++ b/services/audioflinger/AudioFlinger.cpp
@@ -158,11 +158,13 @@ static int load_audio_interface(const char *if_name, audio_hw_device_t **dev)
     if (rc) {
         goto out;
     }
+#if !defined(ICS_AUDIO_BLOB) && !defined(MR0_AUDIO_BLOB)
     if ((*dev)->common.version < AUDIO_DEVICE_API_VERSION_MIN) {
         ALOGE("%s wrong audio hw device version %04x", __func__, (*dev)->common.version);
         rc = BAD_VALUE;
         goto out;
     }
+#endif
     return 0;
 
 out:
@@ -1675,6 +1677,7 @@ audio_module_handle_t AudioFlinger::loadHwModule_l(const char *name)
     {  // scope for auto-lock pattern
         AutoMutex lock(mHardwareLock);
 
+		#if !defined(ICS_AUDIO_BLOB) && !defined(MR0_AUDIO_BLOB)
         if (0 == mAudioHwDevs.size()) {
             mHardwareStatus = AUDIO_HW_GET_MASTER_VOLUME;
             if (NULL != dev->get_master_volume) {
@@ -1692,6 +1695,7 @@ audio_module_handle_t AudioFlinger::loadHwModule_l(const char *name)
                 }
             }
         }
+#endif
 
         mHardwareStatus = AUDIO_HW_SET_MASTER_VOLUME;
         if ((NULL != dev->set_master_volume) &&
@@ -1699,13 +1703,14 @@ audio_module_handle_t AudioFlinger::loadHwModule_l(const char *name)
             flags = static_cast<AudioHwDevice::Flags>(flags |
                     AudioHwDevice::AHWD_CAN_SET_MASTER_VOLUME);
         }
-
+#if !defined(ICS_AUDIO_BLOB) && !defined(MR0_AUDIO_BLOB)
         mHardwareStatus = AUDIO_HW_SET_MASTER_MUTE;
         if ((NULL != dev->set_master_mute) &&
             (OK == dev->set_master_mute(dev, mMasterMute))) {
             flags = static_cast<AudioHwDevice::Flags>(flags |
                     AudioHwDevice::AHWD_CAN_SET_MASTER_MUTE);
         }
+#endif
 
         mHardwareStatus = AUDIO_HW_IDLE;
     }
diff --git a/services/audioflinger/Threads.cpp b/services/audioflinger/Threads.cpp
index 9049df6..3dcea7b 100644
--- a/services/audioflinger/Threads.cpp
+++ b/services/audioflinger/Threads.cpp
@@ -6315,6 +6315,7 @@ reacquire_wakelock:
         mTimestamp.mPosition[ExtendedTimestamp::LOCATION_SERVER] += framesRead;
         mTimestamp.mTimeNs[ExtendedTimestamp::LOCATION_SERVER] = systemTime();
 
+#ifndef RHEA_HWC
         // Update server timestamp with kernel stats
         if (mInput->stream->get_capture_position != nullptr
                 && mPipeSource.get() == nullptr /* don't obtain for FastCapture, could block */) {
@@ -6330,6 +6331,7 @@ reacquire_wakelock:
                 // as the read obtains a lock, preventing the timestamp call from executing.
             }
         }
+#endif
         // Use this to track timestamp information
         // ALOGD("%s", mTimestamp.toString().c_str());
 
-- 
2.7.4

